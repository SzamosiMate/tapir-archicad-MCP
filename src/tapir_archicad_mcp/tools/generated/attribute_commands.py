# This file is auto-generated by generate_tools.py. DO NOT EDIT.

import logging
from pydantic import ValidationError
from tapir_archicad_mcp.app import mcp
from tapir_archicad_mcp.context import multi_conn_instance
from multiconn_archicad.basic_types import Port

from multiconn_archicad.models.commands import (
    CreateBuildingMaterialsParameters,
CreateBuildingMaterialsResult,
CreateCompositesParameters,
CreateCompositesResult,
CreateLayersParameters,
CreateLayersResult,
GetAttributesByTypeParameters,
GetAttributesByTypeResult,
GetBuildingMaterialPhysicalPropertiesParameters,
GetBuildingMaterialPhysicalPropertiesResult,
)

log = logging.getLogger()


@mcp.tool(
    name="attributes_create_building_materials",
    title="CreateBuildingMaterials",
    description="Creates Building Material attributes based on the given parameters."
)
def create_building_materials(port: int, params: CreateBuildingMaterialsParameters) -> CreateBuildingMaterialsResult:
    """
    Creates Building Material attributes based on the given parameters.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing create_building_materials tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="CreateBuildingMaterials",
            parameters=params.model_dump()
        )
        return CreateBuildingMaterialsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateBuildingMaterials result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateBuildingMaterials on port {port}: {e}")
        raise e


@mcp.tool(
    name="attributes_create_composites",
    title="CreateComposites",
    description="Creates Composite attributes based on the given parameters."
)
def create_composites(port: int, params: CreateCompositesParameters) -> CreateCompositesResult:
    """
    Creates Composite attributes based on the given parameters.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing create_composites tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="CreateComposites",
            parameters=params.model_dump()
        )
        return CreateCompositesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateComposites result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateComposites on port {port}: {e}")
        raise e


@mcp.tool(
    name="attributes_create_layers",
    title="CreateLayers",
    description="Creates Layer attributes based on the given parameters."
)
def create_layers(port: int, params: CreateLayersParameters) -> CreateLayersResult:
    """
    Creates Layer attributes based on the given parameters.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing create_layers tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="CreateLayers",
            parameters=params.model_dump()
        )
        return CreateLayersResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateLayers result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateLayers on port {port}: {e}")
        raise e


@mcp.tool(
    name="attributes_get_attributes_by_type",
    title="GetAttributesByType",
    description="Returns the details of every attribute of the given type."
)
def get_attributes_by_type(port: int, params: GetAttributesByTypeParameters) -> GetAttributesByTypeResult:
    """
    Returns the details of every attribute of the given type.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_attributes_by_type tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetAttributesByType",
            parameters=params.model_dump()
        )
        return GetAttributesByTypeResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAttributesByType result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAttributesByType on port {port}: {e}")
        raise e


@mcp.tool(
    name="attributes_get_building_material_physical_properties",
    title="GetBuildingMaterialPhysicalProperties",
    description="Retrieves the physical properties of the given Building Materials."
)
def get_building_material_physical_properties(port: int, params: GetBuildingMaterialPhysicalPropertiesParameters) -> GetBuildingMaterialPhysicalPropertiesResult:
    """
    Retrieves the physical properties of the given Building Materials.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_building_material_physical_properties tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetBuildingMaterialPhysicalProperties",
            parameters=params.model_dump()
        )
        return GetBuildingMaterialPhysicalPropertiesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetBuildingMaterialPhysicalProperties result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetBuildingMaterialPhysicalProperties on port {port}: {e}")
        raise e
