# This file is auto-generated by generate_tools.py. DO NOT EDIT.

import logging
from pydantic import ValidationError
from tapir_archicad_mcp.app import mcp
from tapir_archicad_mcp.context import multi_conn_instance
from multiconn_archicad.basic_types import Port

from multiconn_archicad.models.commands import (
    CreatePropertyDefinitionsParameters,
CreatePropertyDefinitionsResult,
CreatePropertyGroupsParameters,
CreatePropertyGroupsResult,
DeletePropertyDefinitionsParameters,
DeletePropertyDefinitionsResult,
DeletePropertyGroupsParameters,
DeletePropertyGroupsResult,
GetAllPropertiesResult,
GetPropertyValuesOfAttributesParameters,
GetPropertyValuesOfAttributesResult,
GetPropertyValuesOfElementsParameters,
GetPropertyValuesOfElementsResult,
SetPropertyValuesOfAttributesParameters,
SetPropertyValuesOfAttributesResult,
SetPropertyValuesOfElementsParameters,
SetPropertyValuesOfElementsResult,
)

log = logging.getLogger()


@mcp.tool(
    name="properties_create_property_definitions",
    title="CreatePropertyDefinitions",
    description="Creates Custom Property Definitions based on the given parameters."
)
def create_property_definitions(port: int, params: CreatePropertyDefinitionsParameters) -> CreatePropertyDefinitionsResult:
    """
    Creates Custom Property Definitions based on the given parameters.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing create_property_definitions tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="CreatePropertyDefinitions",
            parameters=params.model_dump(mode='json')
        )
        return CreatePropertyDefinitionsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreatePropertyDefinitions result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreatePropertyDefinitions on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_create_property_groups",
    title="CreatePropertyGroups",
    description="Creates Property Groups based on the given parameters."
)
def create_property_groups(port: int, params: CreatePropertyGroupsParameters) -> CreatePropertyGroupsResult:
    """
    Creates Property Groups based on the given parameters.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing create_property_groups tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="CreatePropertyGroups",
            parameters=params.model_dump(mode='json')
        )
        return CreatePropertyGroupsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreatePropertyGroups result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreatePropertyGroups on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_delete_property_definitions",
    title="DeletePropertyDefinitions",
    description="Deletes the given Custom Property Definitions."
)
def delete_property_definitions(port: int, params: DeletePropertyDefinitionsParameters) -> DeletePropertyDefinitionsResult:
    """
    Deletes the given Custom Property Definitions.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing delete_property_definitions tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="DeletePropertyDefinitions",
            parameters=params.model_dump(mode='json')
        )
        return DeletePropertyDefinitionsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for DeletePropertyDefinitions result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing DeletePropertyDefinitions on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_delete_property_groups",
    title="DeletePropertyGroups",
    description="Deletes the given Custom Property Groups."
)
def delete_property_groups(port: int, params: DeletePropertyGroupsParameters) -> DeletePropertyGroupsResult:
    """
    Deletes the given Custom Property Groups.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing delete_property_groups tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="DeletePropertyGroups",
            parameters=params.model_dump(mode='json')
        )
        return DeletePropertyGroupsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for DeletePropertyGroups result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing DeletePropertyGroups on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_get_all_properties",
    title="GetAllProperties",
    description="Returns all user defined and built-in properties."
)
def get_all_properties(port: int) -> GetAllPropertiesResult:
    """
    Returns all user defined and built-in properties.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_all_properties tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetAllProperties",
            parameters={}
        )
        return GetAllPropertiesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAllProperties result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAllProperties on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_get_property_values_of_attributes",
    title="GetPropertyValuesOfAttributes",
    description="Returns the property values of the attributes for the given property."
)
def get_property_values_of_attributes(port: int, params: GetPropertyValuesOfAttributesParameters) -> GetPropertyValuesOfAttributesResult:
    """
    Returns the property values of the attributes for the given property.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_property_values_of_attributes tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetPropertyValuesOfAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetPropertyValuesOfAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPropertyValuesOfAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPropertyValuesOfAttributes on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_get_property_values_of_elements",
    title="GetPropertyValuesOfElements",
    description="Returns the property values of the elements for the given property. It works for subelements of hierarchal elements also."
)
def get_property_values_of_elements(port: int, params: GetPropertyValuesOfElementsParameters) -> GetPropertyValuesOfElementsResult:
    """
    Returns the property values of the elements for the given property. It works for subelements of hierarchal elements also.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_property_values_of_elements tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetPropertyValuesOfElements",
            parameters=params.model_dump(mode='json')
        )
        return GetPropertyValuesOfElementsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPropertyValuesOfElements result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPropertyValuesOfElements on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_set_property_values_of_attributes",
    title="SetPropertyValuesOfAttributes",
    description="Sets the property values of attributes."
)
def set_property_values_of_attributes(port: int, params: SetPropertyValuesOfAttributesParameters) -> SetPropertyValuesOfAttributesResult:
    """
    Sets the property values of attributes.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing set_property_values_of_attributes tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="SetPropertyValuesOfAttributes",
            parameters=params.model_dump(mode='json')
        )
        return SetPropertyValuesOfAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for SetPropertyValuesOfAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing SetPropertyValuesOfAttributes on port {port}: {e}")
        raise e


@mcp.tool(
    name="properties_set_property_values_of_elements",
    title="SetPropertyValuesOfElements",
    description="Sets the property values of elements. It works for subelements of hierarchal elements also."
)
def set_property_values_of_elements(port: int, params: SetPropertyValuesOfElementsParameters) -> SetPropertyValuesOfElementsResult:
    """
    Sets the property values of elements. It works for subelements of hierarchal elements also.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing set_property_values_of_elements tool on port {port}")
    multi_conn = multi_conn_instance.get()

    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")

    conn_header = multi_conn.active[target_port]

    try:

        result_dict = conn_header.core.post_tapir_command(
            command="SetPropertyValuesOfElements",
            parameters=params.model_dump(mode='json')
        )
        return SetPropertyValuesOfElementsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for SetPropertyValuesOfElements result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing SetPropertyValuesOfElements on port {port}: {e}")
        raise e
